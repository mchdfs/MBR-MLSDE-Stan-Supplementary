isContinuousTime=TRUE)
modelLV <- dynr.model(dynamics=dynamics, measurement=meas,
noise=ecov, initial=initial,
data=dataLV, outfile="L-V.c")
# modelOU@ub<-rep(10,6)
# modelOU@lb<-rep(-10,6)
# modelOU@lb[modelOU$param.names %in% c("pnoise","ounoise")] = -30
# modelOU@ub[modelOU$param.names %in% "mu"] = 20
resLV <- dynr.cook(modelLV)
formula<-list(
x~growth*x-prey*x*y,
y~predatory*x*y-death*y
)
dynamics<-prep.formulaDynamics(formula=formula,
startval=c(growth=.5,prey=5,predatory=2,death=.5),
isContinuousTime=TRUE)
modelLV <- dynr.model(dynamics=dynamics, measurement=meas,
noise=ecov, initial=initial,
data=dataLV, outfile="L-V.c")
# modelOU@ub<-rep(10,6)
# modelOU@lb<-rep(-10,6)
# modelOU@lb[modelOU$param.names %in% c("pnoise","ounoise")] = -30
# modelOU@ub[modelOU$param.names %in% "mu"] = 20
resLV <- dynr.cook(modelLV)
ecov <- prep.noise(
values.latent=diag(c(0.1,0.1)),
params.latent=diag(c('sigmax','sigmay')),
values.observed=diag(0,2), params.observed=diag('fixed', 2))
modelLV <- dynr.model(dynamics=dynamics, measurement=meas,
noise=ecov, initial=initial,
data=dataLV, outfile="L-V.c")
resLV <- dynr.cook(modelLV)
modelLV@xstart
modelOU@lb[1:4]<-0
modelLV@lb[1:4]<-0
resLV <- dynr.cook(modelLV)
summary(resLV)
plot(resLV$eta_smooth_final[1,])
plot(resLV$eta_smooth_final[1,]),type="l"
plot(resLV$eta_smooth_final[1,]),type="l")
plot(resLV$eta_smooth_final[1,],type="l")
lines(resLV$eta_smooth_final[2,],type="l")
lines(resLV$eta_smooth_final[2,],col=2)
plot(resLV$eta_smooth_final[1,],type="l")
lines(resLV$eta_smooth_final[2,],col=2)
diag(c(1,1,0,0))
formulaTVP<-list(
x~growth*(x-mux)-prey*(x-mux)*(y-muy),
y~predatory*(x-mux)*(y-muy)-death*(y-muy),
mux~0,
muy~0
)
meas <- prep.measurement(
values.load=matrix(c(1,0,0,0,
0,1,0,0),byrow=T,ncol=4,nrow=2),
params.load=matrix("fixed", ncol=4,nrow=2),
state.names=c("x","y","mux","muy"),
obs.names=c("x","y"))
ecov <- prep.noise(
values.latent=diag(c(0,0,0.1,0.1)),
params.latent=diag(c('fixed','fixed','sigmamux','sigmamuy')),
values.observed=diag(0,2), params.observed=diag('fixed', 2))
initial <- prep.initial(
values.inistate=as.numeric(r2d[1,1:2],0,0),
params.inistate=c('fixed', 'fixed',"fixed","fixed"),
values.inicov=diag(0, 4),
params.inicov=diag('fixed', 4))
as.numeric(r2d[1,1:2],0,0)
initial <- prep.initial(
values.inistate=c(as.numeric(r2d[1,1:2],0,0)),
params.inistate=c('fixed', 'fixed',"fixed","fixed"),
values.inicov=diag(0, 4),
params.inicov=diag('fixed', 4))
diag(0, 4)
diag('fixed', 4)
c(as.numeric(r2d[1,1:2],0,0))
initial <- prep.initial(
values.inistate=c(as.numeric(r2d[1,1:2]),0,0),
params.inistate=c('fixed', 'fixed',"fixed","fixed"),
values.inicov=diag(0, 4),
params.inicov=diag('fixed', 4))
dynamics<-prep.formulaDynamics(formula=formula,
startval=c(growth=.5,prey=5,predatory=2,death=.5),
isContinuousTime=TRUE)
dynamics<-prep.formulaDynamics(formula=formulaTVP,
startval=c(growth=.5,prey=5,predatory=2,death=.5),
isContinuousTime=TRUE)
dynamicsTVP<-prep.formulaDynamics(formula=formulaTVP,
startval=c(growth=.5,prey=5,predatory=2,death=.5),
isContinuousTime=TRUE)
modelLV-TVP <- dynr.model(dynamics=dynamics, measurement=meas,
noise=ecov, initial=initial,
data=dataLV, outfile="L-V.c")
modelLV_TVP <- dynr.model(dynamics=dynamics, measurement=meas,
noise=ecov, initial=initial,
data=dataLV, outfile="L-V.c")
resLV_TVP <- dynr.cook(modelLV_TVP)
ecov <- prep.noise(
values.latent=diag(c(0.1,0.1,0.1,0.1)),
params.latent=diag(c('fixed','fixed','sigmamux','sigmamuy')),
values.observed=diag(0,2), params.observed=diag('fixed', 2))
initial <- prep.initial(
values.inistate=c(as.numeric(r2d[1,1:2]),0,0),
params.inistate=c('fixed', 'fixed',"fixed","fixed"),
values.inicov=diag(0, 4),
params.inicov=diag('fixed', 4))
dynamicsTVP<-prep.formulaDynamics(formula=formulaTVP,
startval=c(growth=.5,prey=5,predatory=2,death=.5),
isContinuousTime=TRUE)
modelLV_TVP <- dynr.model(dynamics=dynamics, measurement=meas,
noise=ecov, initial=initial,
data=dataLV, outfile="L-V.c")
resLV_TVP <- dynr.cook(modelLV_TVP)
ecov <- prep.noise(
values.latent=diag(c(1,1,0.1,0.1)),
params.latent=diag(c('fixed','fixed','sigmamux','sigmamuy')),
values.observed=diag(0,2), params.observed=diag('fixed', 2))
initial <- prep.initial(
values.inistate=c(as.numeric(r2d[1,1:2]),0,0),
params.inistate=c('fixed', 'fixed',"fixed","fixed"),
values.inicov=diag(0, 4),
params.inicov=diag('fixed', 4))
dynamicsTVP<-prep.formulaDynamics(formula=formulaTVP,
startval=c(growth=.5,prey=5,predatory=2,death=.5),
isContinuousTime=TRUE)
modelLV_TVP <- dynr.model(dynamics=dynamics, measurement=meas,
noise=ecov, initial=initial,
data=dataLV, outfile="L-V.c")
resLV_TVP <- dynr.cook(modelLV_TVP)
ecov <- prep.noise(
values.latent=diag(c(0.1,0.1,0.1,0.1)),
params.latent=diag(c('sigmax','sigmay','sigmamux','sigmamuy')),
values.observed=diag(0,2), params.observed=diag('fixed', 2))
initial <- prep.initial(
values.inistate=c(as.numeric(r2d[1,1:2]),0,0),
params.inistate=c('fixed', 'fixed',"fixed","fixed"),
values.inicov=diag(0, 4),
params.inicov=diag('fixed', 4))
dynamicsTVP<-prep.formulaDynamics(formula=formulaTVP,
startval=c(growth=.5,prey=5,predatory=2,death=.5),
isContinuousTime=TRUE)
modelLV_TVP <- dynr.model(dynamics=dynamics, measurement=meas,
noise=ecov, initial=initial,
data=dataLV, outfile="L-V.c")
resLV_TVP <- dynr.cook(modelLV_TVP)
modelLV@lb[1:4]<-0
resLV_TVP <- dynr.cook(modelLV_TVP)
meas <- prep.measurement(
values.load=matrix(c(1,0,0,0,
0,1,0,0),byrow=T,ncol=4,nrow=2),
params.load=matrix("fixed", ncol=4,nrow=2),
state.names=c("x","y","mux","muy"),
obs.names=c("x","y"))
ecov <- prep.noise(
values.latent=diag(c(0,0,0.1,0.1)),
params.latent=diag(c('fixed','fixed','sigmamux','sigmamuy')),
values.observed=diag(0,2), params.observed=diag('fixed', 2))
initial <- prep.initial(
values.inistate=c(as.numeric(r2d[1,1:2]),0,0),
params.inistate=c('fixed', 'fixed',"fixed","fixed"),
values.inicov=diag(0, 4),
params.inicov=diag('fixed', 4))
dynamicsTVP<-prep.formulaDynamics(formula=formulaTVP,
startval=c(growth=.5,prey=5,predatory=2,death=.5),
isContinuousTime=TRUE)
modelLV_TVP <- dynr.model(dynamics=dynamics, measurement=meas,
noise=ecov, initial=initial,
data=dataLV, outfile="L-V.c")
modelLV@lb[1:4]<-0
resLV_TVP <- dynr.cook(modelLV_TVP)
library(Sim.DiffProc)
times <- seq(0,40, by=0.25)
nT <- length(times)
gx <- expression(0,0)
freq=-20
damp=0.5
# generate linear decrease
mut <- c(rep(2,40),seq(2,0,length=40),rep(0,nT-80))
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d<-c(r2dtemp)
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d<-rbind(r2d,r2dtemp)
}
gx <- expression(0,0)
freq=-20
damp=0.5
# generate linear decrease
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d<-c(r2dtemp)
mut <- c(rep(2,40),seq(2,0,length=40),rep(0,nT-80))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d<-rbind(r2d,r2dtemp)
}
r2d <- data.frame(r2d,times=times)
names(r2d) <- c("x","y","times")
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d_2<-c(r2dtemp)
mut <- c(rep(2,40),seq(2,0,length=20),rep(0,nT-60))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d_2<-rbind(r2d_2,r2dtemp)
}
r2d_2 <- data.frame(r2d_2,times=times)
names(r2d_2) <- c("x","y","times")
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d_3<-c(r2dtemp)
mut <- c(rep(2,20),seq(2,0,length=40),rep(0,nT-60))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d_3<-rbind(r2d_3,r2dtemp)
}
r2d_3 <- data.frame(r2d_3,times=times)
names(r2d_3) <- c("x","y","times")
plot(r2d$x,type="l",ylim=range(r2d[,1:2],na.rm=T),xlab="",ylab="")
lines(mut,lty=2,lwd=2)
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d_2<-c(r2dtemp)
gx <- expression(0,0)
freq=-20
damp=0.5
# generate linear decrease
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d<-c(r2dtemp)
mut <- c(rep(2,40),seq(2,0,length=40),rep(0,nT-80))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d<-rbind(r2d,r2dtemp)
}
r2d <- data.frame(r2d,times=times)
names(r2d) <- c("x","y","times")
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d_2<-c(r2dtemp)
mut2 <- c(rep(2,40),seq(2,0,length=20),rep(0,nT-60))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut2[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d_2<-rbind(r2d_2,r2dtemp)
}
r2d_2 <- data.frame(r2d_2,times=times)
names(r2d_2) <- c("x","y","times")
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d_3<-c(r2dtemp)
mut3 <- c(rep(2,20),seq(2,0,length=40),rep(0,nT-60))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut3[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d_3<-rbind(r2d_3,r2dtemp)
}
r2d_3 <- data.frame(r2d_3,times=times)
names(r2d_3) <- c("x","y","times")
plot(r2d$x,type="l",ylim=range(r2d[,1:2],na.rm=T),xlab="",ylab="")
lines(mut,lty=2,lwd=2)
lines(r2d_2$x,col=4)
lines(mut2,lty=2,lwd=2,col=4)
gx <- expression(0,0)
freq=-20
damp=0
# damp=0.5
# generate linear decrease
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d<-c(r2dtemp)
mut <- c(rep(2,40),seq(2,0,length=40),rep(0,nT-80))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d<-rbind(r2d,r2dtemp)
}
r2d <- data.frame(r2d,times=times)
names(r2d) <- c("x","y","times")
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d_2<-c(r2dtemp)
mut2 <- c(rep(2,40),seq(2,0,length=20),rep(0,nT-60))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut2[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d_2<-rbind(r2d_2,r2dtemp)
}
r2d_2 <- data.frame(r2d_2,times=times)
names(r2d_2) <- c("x","y","times")
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d_3<-c(r2dtemp)
mut3 <- c(rep(2,20),seq(2,0,length=40),rep(0,nT-60))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut3[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d_3<-rbind(r2d_3,r2dtemp)
}
r2d_3 <- data.frame(r2d_3,times=times)
names(r2d_3) <- c("x","y","times")
plot(r2d$x,type="l",ylim=range(r2d[,1:2],na.rm=T),xlab="",ylab="")
lines(mut,lty=2,lwd=2)
lines(r2d_2$x,col=4)
lines(mut2,lty=2,lwd=2,col=4)
lines(r2d_3$x,col=2)
lines(mut,lty=2,lwd=2,col=2)
lines(mut3,lty=2,lwd=2,col=2)
plot(r2d$x,type="l",ylim=range(r2d[,1:2],na.rm=T),xlab="",ylab="")
lines(mut,lty=2,lwd=2)
lines(r2d_2$x,col=4)
lines(mut2,lty=2,lwd=2,col=4)
lines(r2d_3$x,col=2)
lines(mut3,lty=2,lwd=2,col=2)
plot(r2d$x,type="l",ylim=range(r2d[,1:2],na.rm=T),xlab="",ylab="")
lines(mut,lty=3,lwd=2)
lines(r2d_2$x,col=4)
lines(mut2,lty=3,lwd=2,col=4)
lines(r2d_3$x,col=2)
lines(mut3,lty=3,lwd=2,col=2)
legend("topright",lty=c(1,2,1,2,1,2),col=c(1,1,4,4,2,2),
legend = c("D (Distress/Perceived threat): child 1","B (Behavior): child 1",
"D (Distress/Perceived threat): child 2","B (Behavior): child 2",
"D (Distress/Perceived threat): child 3","B (Behavior): child 3"))
pdf("P3-1.pdf")
plot(r2d$x,type="l",ylim=range(r2d[,1:2],na.rm=T),xlab="",ylab="")
lines(mut,lty=2,lwd=2)
lines(r2d_2$x,col=4)
lines(mut2,lty=2,lwd=2,col=4)
lines(r2d_3$x,col=2)
lines(mut3,lty=2,lwd=2,col=2)
legend("topright",lty=c(1,2,1,2,1,2),col=c(1,1,4,4,2,2),
legend = c("D (Distress/Perceived threat): child 1","B (Behavior): child 1",
"D (Distress/Perceived threat): child 2","B (Behavior): child 2",
"D (Distress/Perceived threat): child 3","B (Behavior): child 3"))
dev.off()
# damp=0
damp=0.5
# generate linear decrease
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d<-c(r2dtemp)
mut <- c(rep(2,40),seq(2,0,length=40),rep(0,nT-80))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d<-rbind(r2d,r2dtemp)
}
r2d <- data.frame(r2d,times=times)
names(r2d) <- c("x","y","times")
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d_2<-c(r2dtemp)
mut2 <- c(rep(2,40),seq(2,0,length=20),rep(0,nT-60))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut2[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d_2<-rbind(r2d_2,r2dtemp)
}
r2d_2 <- data.frame(r2d_2,times=times)
names(r2d_2) <- c("x","y","times")
set.seed(12345)
r2dtemp <- c(2.1,0)
r2d_3<-c(r2dtemp)
mut3 <- c(rep(2,20),seq(2,0,length=40),rep(0,nT-60))
for (i in 2:nT){
# if(all(r2dtemp<1e-6)){r2dtemp <- c(sample(c(0,runif(1,0,.5)),1,prob=c(0.9,0.1)),0.001); r2d <- rbind(r2d,c(x=NA,y=NA))}
# print(mut[i])
mu=mut3[i]
mod2dtemp <- snssde2d(drift=expression(y,freq*(x-mu)-damp*y),diffusion=gx,
M=1,t0=ifelse(i==1,0,round(times[i-1],5)),x0=as.numeric(r2dtemp),
T=round(times[i],5),N=300,type="str",method="rk1")
r2dtemp <- c(mod2dtemp$X[length(mod2dtemp$X)],mod2dtemp$Y[length(mod2dtemp$X)])
r2d_3<-rbind(r2d_3,r2dtemp)
}
r2d_3 <- data.frame(r2d_3,times=times)
names(r2d_3) <- c("x","y","times")
pdf("P3-2.pdf")
plot(r2d$x,type="l",ylim=range(r2d[,1:2],na.rm=T),xlab="",ylab="")
lines(mut,lty=2,lwd=2)
lines(r2d_2$x,col=4)
lines(mut2,lty=2,lwd=2,col=4)
lines(r2d_3$x,col=2)
lines(mut3,lty=2,lwd=2,col=2)
legend("topright",lty=c(1,2,1,2,1,2),col=c(1,1,4,4,2,2),
legend = c("D (Distress/Perceived threat): child 1","B (Behavior): child 1",
"D (Distress/Perceived threat): child 2","B (Behavior): child 2",
"D (Distress/Perceived threat): child 3","B (Behavior): child 3"))
dev.off()
setwd("~/git-personal/MBR-MLSDE-Stan-Supplementary/MLSDE-SampleScripts")
library(rstan)
rstan_options(auto_write = TRUE)
load("SimData1.RData"))
load("SimData1.RData")
stanDso<-rstan::stan_model(file="SampleStanScript.stan")
stanDso<-rstan::stan_model(file="SampleStanScript.stan")
stan_data <- list(y = r2darray[-1,,],
N=N,
T = nT,
t0 = 0,
ts = matrix(seq(dt,T,by=dt),ncol=1),
Lambda = diag(1,2),
pstart=c(0,0,0),ystart=r2darray[1,,],
rel_tol=1e-6,abs_tol=1e-6,max_step=1e6)
N=30
T=30
dt=0.1
nT=T/dt
trial=1
library(Sim.DiffProc)
Seed=2020+trial
set.seed(Seed)
a1=0.3
a2=0.2
b1=0.8
b2=0
mu1=0
mu2=0
sigma1=0.2
fx<-expression(a1i*(mu1-x)+a2i*(y-x),b1i*(mu2-y)+b2i*(x-y))
gx <- expression(sigma1,sigma1)
generatedxstarti<-matrix(NA,nrow=N,ncol=3)
generatedparami<-matrix(NA,nrow=N,ncol=5)
r2darray<-array(NA,dim=c(nT+1,2,N))
r2dall<-c()
for (j in 1:N){
r2dtemp<-c(-2,0)+rnorm(2,0,c(1,0.1))
generatedxstarti[j,]<-c(j,r2dtemp)
a1i <- rnorm(1,a1,0.1)
a2i <- rnorm(1,a2,0.2)
b1i <- rnorm(1,b1,0.2)
b2i <- rnorm(1,b2,0.1)
generatedparami[j,] <- c(j,a1i,a2i,b1i,b2i)
r2d<-r2dtemp
for (k in seq(dt,T,by=dt)){
mod2dtemp <- snssde2d(drift=fx,diffusion=gx,M=1,t0=k-dt,x0=as.numeric(r2dtemp),T=k,N=10,type="str",method="smilstein")
r2dtemp <- rsde2d(mod2dtemp,at=round(k,3))
r2d<-rbind(r2d,r2dtemp)
}
r2darray[,1,j]<-r2d$x
r2darray[,2,j]<-r2d$y
r2dall<-rbind(r2dall,cbind(r2d,id=j))
}
View(r2dall)
r2darray[-1,,] = r2darray[-1,,]+rnorm((nT)*N*2,0,0.5)
save(Seed,r2dall,r2darray,generatedparami,generatedxstarti,file=paste0("SimData",N,"T",T,"_",trial,".RData"))
